@using ExpenseTracker.Models
@using KavaPryct.Services

@if (_visible)
{
    <div class="fixed inset-0 bg-black/50 z-40" @onclick="Cancel"></div>
    <div class="fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-lg bg-base-100 shadow-xl rounded-xl p-4 z-50">
        <div class="flex items-center justify-between pb-2 border-b">
            <h3 class="text-lg font-semibold">@Title</h3>
            <button class="btn btn-sm" @onclick="Cancel">✕</button>
        </div>

        <div class="space-y-3 py-4">
            <div class="grid grid-cols-2 gap-2">
                <div>
                    <label class="block text-sm font-medium mb-1">Tipo</label>
                    <select class="select select-bordered w-full" @bind="Model.TransactionTypeId">
                        <option value="@((int)Giro.Ingreso)">Ingreso</option>
                        <option value="@((int)Giro.Egreso)">Egreso</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Fecha y hora</label>
                    <input type="datetime-local"
                           class="input input-bordered w-full"
                           @bind-value="Model.dateTime"
                           @bind-value:format="yyyy-MM-ddTHH:mm" />
                </div>
            </div>

            <div class="grid grid-cols-2 gap-2">
                <div>
                    <label class="block text-sm font-medium mb-1">Monto</label>
                    <input type="number" class="input input-bordered w-full" step="0.01" @bind="Model.Amount" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Método de pago</label>
                    <select class="select select-bordered w-full"
                            @bind="Model.PayMethodId"
                            @bind:after="UpdatePaymentMode">
                        <option value="@((int)MetodosPago.Efectivo)">Efectivo</option>
                        <option value="@((int)MetodosPago.Transferencia)">Transferencia</option>
                        <option value="@((int)MetodosPago.Tarjeta)">Tarjeta</option>
                        <option value="@((int)MetodosPago.Otro)">Otro</option>
                    </select>
                </div>
            </div>

            <div>
                <label class="block text-sm font-medium mb-1">Categoría</label>
                <input class="input input-bordered w-full" @bind="Model.Category" placeholder="Consultas, Insumos, etc." />
            </div>

            <div>
                <label class="block text-sm font-medium mb-1">Descripción</label>
                <input class="input input-bordered w-full" @bind="Model.Description" placeholder="Detalle corto (opcional)" />
            </div>

            @if (Model.TransactionTypeId == (int)Giro.Ingreso)
            {
                <div class="grid grid-cols-2 gap-2">
                    <div>
                        <label class="block text-sm font-medium mb-1">Empleado (ObjectId)</label>
                        <input class="input input-bordered w-full" @bind="Model.EmployeeObjectId" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-1">Empleado (Nombre)</label>
                        <input class="input input-bordered w-full" @bind="Model.EmployeeName" />
                    </div>
                </div>
            }
            else
            {
                <!-- Para Egreso se asigna "Otros gastos" automáticamente al guardar si está vacío -->
                <div class="alert alert-info text-sm">
                    Si dejas vacío el empleado, se asignará a <b>Otros gastos</b>.
                </div>
            }
        </div>

        <div class="flex justify-end gap-2 border-t pt-3">
            <button class="btn btn-ghost" @onclick="Cancel">Cancelar</button>
            <button class="btn btn-primary" @onclick="Save">Guardar</button>
        </div>
    </div>
}

@code {
    [Parameter] public bool _visible { get; set; }
    [Parameter] public int ModeTransactionTypeId { get; set; } = (int)Giro.Ingreso;
    [Parameter] public ExpenseData? Editing { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<ExpenseData> OnSaved { get; set; }

    private ExpenseData Model = new();
    private string Title => (Editing is null ? "Nueva" : "Editar") + " transacción";
    public void ShowAddDialog(int defaultTypeId = (int)Giro.Ingreso)
    {
        ModeTransactionTypeId = defaultTypeId;
        Editing = null;
        Model = new ExpenseData
        {
            TransactionTypeId = ModeTransactionTypeId,
            Category = ModeTransactionTypeId == (int)Giro.Ingreso ? "Consultas" : "Gastos",
            PayMethodId = (int)MetodosPago.Efectivo,
            PaymentMode = nameof(MetodosPago.Efectivo)
        };
        Model.dateTime = DateTime.Now;
        _visible = true;
        StateHasChanged();
    }

    public void ShowEditDialog(ExpenseData item)
    {
        Editing = item;
        // Clonar a Model para edición no destructiva
        Model = new ExpenseData
        {
            ObjectId = item.ObjectId,
            TransactionTypeId = item.TransactionTypeId,
            Amount = item.Amount,
            DatFecha = item.DatFecha,
            Category = item.Category,
            Description = item.Description,
            PayMethodId = item.PayMethodId,
            PaymentMode = item.PaymentMode,
            EmployeeObjectId = item.EmployeeObjectId,
            EmployeeName = item.EmployeeName,
            MonthShort = item.MonthShort,
            MonthFull = item.MonthFull,
            FormattedDate = item.FormattedDate
        };
        _visible = true;
        StateHasChanged();
    }

    public void CloseDialog()
    {
        _visible = false;
        StateHasChanged();
    }

    // Llama CloseDialog en Cancel/Save
    // private async Task Save()
    // {
    //     // … tu validación/ajustes (Otros gastos para Egreso, etc.)
    //     await OnSaved.InvokeAsync(Model);
    //     _visible = false;
    //     await InvokeAsync(StateHasChanged);
    // }

    // private async Task Cancel()
    // {
    //     _visible = false;
    //     await OnCancel.InvokeAsync();
    //     await InvokeAsync(StateHasChanged);
    // }

    protected override void OnParametersSet()
    {
        if (!_visible) return;

        if (Editing is not null)
        {
            // Clonar para edición no destructiva
            Model = new ExpenseData
            {
                ObjectId = Editing.ObjectId,
                TransactionTypeId = Editing.TransactionTypeId,
                Amount = Editing.Amount,
                DatFecha = Editing.DatFecha,
                Category = Editing.Category,
                Description = Editing.Description,
                PayMethodId = Editing.PayMethodId,
                PaymentMode = Editing.PaymentMode,
                EmployeeObjectId = Editing.EmployeeObjectId,
                EmployeeName = Editing.EmployeeName,
                MonthShort = Editing.MonthShort,
                MonthFull = Editing.MonthFull,
                FormattedDate = Editing.FormattedDate
            };
        }
        else
        {
            Model = new ExpenseData
            {
                TransactionTypeId = ModeTransactionTypeId,
                Amount = 0m,
                Category = ModeTransactionTypeId == (int)Giro.Ingreso ? "Consultas" : "Gastos",
                PayMethodId = (int)MetodosPago.Efectivo,
                PaymentMode = nameof(MetodosPago.Efectivo),
            };
            Model.dateTime = DateTime.Now;
            UpdateDateStrings();
        }
    }

    private string LocalDateTimeString
    {
        get => Model.dateTime.ToString("yyyy-MM-ddTHH:mm");
        set
        {
            if (DateTime.TryParse(value, out var local))
            {
                Model.dateTime = local;   // setter llena DatFecha.Iso (UTC)
                UpdateDateStrings();
            }
        }
    }

    void UpdatePaymentMode()
    {
        Model.PaymentMode = Enum.GetName(typeof(MetodosPago), Model.PayMethodId)
                             ?? Model.PayMethodId.ToString();
    }

    private void UpdateDateStrings()
    {
        var dt = Model.dateTime;
        Model.MonthShort = dt.ToString("MMM");
        Model.MonthFull = dt.ToString("MMMM, yyyy");
        Model.FormattedDate = dt.ToString("MM/dd/yyyy hh:mm tt");
    }

    private async Task Save()
    {
        // Defaults para Egreso → "Otros gastos"
        if (Model.TransactionTypeId == (int)Giro.Egreso)
        {
            Model.EmployeeObjectId ??= "OTROS_GASTOS";
            Model.EmployeeName ??= "Otros gastos";
        }

        // Si editas y no hay ObjectId (por si es local), déjalo nulo; tu capa remota devolverá el objectId
        await OnSaved.InvokeAsync(Model);
    }

    private async Task Cancel() => await OnCancel.InvokeAsync();
}
