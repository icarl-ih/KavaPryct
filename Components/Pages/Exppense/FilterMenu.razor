@using ExpenseTracker.Models
@using KavaPryct.Components.Models

@if (_visible)
{
    <div class="fixed inset-0 bg-black/50 z-40" @onclick="OnClose"></div>
    <div class="fixed right-0 top-0 h-full w-[360px] bg-base-100 shadow-xl p-4 z-50 overflow-auto">
        <div class="flex items-center justify-between pb-2 border-b mb-4">
            <h3 class="text-lg font-semibold">Filtros</h3>
            <button class="btn btn-sm" @onclick="OnClose">✕</button>
        </div>

        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium mb-1">Empleado</label>
                <select class="select select-bordered w-full" @bind="EmpleadoId">
                    <option value="">Todos</option>
                    @foreach (var e in Empleados ?? Enumerable.Empty<EmpleadosModel>())
                    {
                        <option value="@e.ObjectId">@e.NombreCorto</option>
                    }
                </select>
            </div>

            <div class="grid grid-cols-2 gap-2">
                <div>
                    <label class="block text-sm font-medium mb-1">Monto mínimo</label>
                    <input type="number" class="input input-bordered w-full" @bind-value="MontoMin" step="0.01" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Monto máximo</label>
                    <input type="number" class="input input-bordered w-full" @bind-value="MontoMax" step="0.01" />
                </div>
            </div>

            <div class="grid grid-cols-2 gap-2">
                <div>
                    <label class="block text-sm font-medium mb-1">Desde</label>
                    <input type="date" class="input input-bordered w-full" @bind-value="Desde" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Hasta</label>
                    <input type="date" class="input input-bordered w-full" @bind-value="Hasta" />
                </div>
            </div>

            <div class="flex gap-2">
                <button class="btn btn-primary" @onclick="Apply">Aplicar</button>
                <button class="btn btn-ghost" @onclick="Clear">Limpiar</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public IEnumerable<EmpleadosModel>? Empleados { get; set; }
    [Parameter] public bool _visible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Func<ExpenseData, bool>?> OnFilterChanged { get; set; }

    private string? EmpleadoId;
    private decimal? MontoMin, MontoMax;
    private DateTime? Desde, Hasta;

    // private async Task Apply()
    // {
    //     Func<ExpenseData, bool> predicate = x =>
    //     {
    //         if (!string.IsNullOrEmpty(EmpleadoId) && x.EmployeeObjectId != EmpleadoId) return false;
    //         if (MontoMin.HasValue && x.Amount < MontoMin.Value) return false;
    //         if (MontoMax.HasValue && x.Amount > MontoMax.Value) return false;
    //         if (Desde.HasValue && x.dateTime.Date < Desde.Value.Date) return false;
    //         if (Hasta.HasValue && x.dateTime.Date > Hasta.Value.Date) return false;
    //         return true;
    //     };

    //     await OnFilterChanged.InvokeAsync(predicate);
    //     await OnClose.InvokeAsync();
    // }

    
    // --- NUEVOS MÉTODOS PÚBLICOS ---
    public void ShowFilterMenu()
    {
        _visible = true;
        StateHasChanged();
    }

    public void HideFilterMenu()
    {
        _visible = false;
        StateHasChanged();
    }

    // Botones internos del panel
    private async Task Apply()
    {
        // arma tu predicate aquí (como ya lo tenías)
        Func<ExpenseData, bool>? predicate = BuildPredicate();
        if (OnFilterChanged.HasDelegate)
            await OnFilterChanged.InvokeAsync(predicate);

        _visible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Clear()
    {
        // limpia campos internos…
        if (OnFilterChanged.HasDelegate)
            await OnFilterChanged.InvokeAsync(null);

        _visible = false;
        await InvokeAsync(StateHasChanged);
    }

    private Func<ExpenseData, bool>? BuildPredicate()
    {
        // tu lógica de filtros (empleado, montos, fechas…)
        return null; // ejemplo
    }
}
}
