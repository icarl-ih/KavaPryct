@using ExpenseTracker.Models
@using ExpenseTracker.Service
@using KavaPryct.Services
@inject ExpenseDataService ExpenseDataService


<table class="table w-full">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Tipo</th>
            <th>Categoría</th>
            <th>Método</th>
            <th>Empleado</th>
            <th class="text-right">Monto</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Items is not null)
        {
            @foreach (var x in Items.OrderByDescending(r => r.dateTime))
            {
                <tr>
                    <td>@x.dateTime.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        @(x.TransactionTypeId == (int)Giro.Ingreso ? "Ingreso" :
                                        x.TransactionTypeId == (int)Giro.Egreso ? "Egreso" : x.TransactionTypeId.ToString())
            </td>
            <td>@x.Category</td>
            <td>@x.PaymentMode</td>
            <td>@x.EmployeeName</td>
            <td class="text-right">@x.Amount.ToString("C")</td>
            <td class="text-right">
                <div class="flex justify-end gap-2">
                    <button class="btn btn-xs" @onclick="() => OnEdit.InvokeAsync(x)">Editar</button>
                    <button class="btn btn-xs btn-error" @onclick="() => OnDelete.InvokeAsync(x)">Eliminar</button>
                </div>
            </td>
        </tr>
                }
        }
    </tbody>
</table>

@code {
    [Parameter] public IEnumerable<ExpenseData> Items { get; set; } = Enumerable.Empty<ExpenseData>();
    [Parameter] public EventCallback<ExpenseData> OnEdit { get; set; }
    [Parameter] public EventCallback<ExpenseData> OnDelete { get; set; }
    private string _search = "";

    protected override void OnInitialized()
    {
        ExpenseDataService.OnChanged += HandleServiceChanged;
        Rebuild();
    }

    private void HandleServiceChanged()
    {
        Rebuild();
        InvokeAsync(StateHasChanged);
    }

    private void Rebuild()
    {
        // Trae la ventana actual desde el servicio
        var data = ExpenseDataService?.ExpenseData ?? new List<ExpenseData>();
        Items = data.OrderByDescending(x => x.dateTime).ToList();

        if (!string.IsNullOrWhiteSpace(_search))
            Items = Items.Where(MatchesSearch).ToList();
    }

    private bool MatchesSearch(ExpenseData x)
    {
        var q = _search.ToLowerInvariant();
        return (x.Category?.ToLowerInvariant().Contains(q) ?? false)
            || (x.Description?.ToLowerInvariant().Contains(q) ?? false)
            || (x.PaymentMode?.ToLowerInvariant().Contains(q) ?? false)
            || (x.EmployeeName?.ToLowerInvariant().Contains(q) ?? false);
    }

    // ← llamado por Expense.razor
    public Task ReloadAsync()
    {
        Rebuild();
        StateHasChanged();
        return Task.CompletedTask;
    }

    // ← llamado por tu buscador: ContentRef.Search(SearchValue)
    public Task Search(string query)
    {
        _search = query?.Trim() ?? "";
        Rebuild();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Dispose() => ExpenseDataService.OnChanged -= HandleServiceChanged;
}
