@page "/expense"
@using ExpenseTracker.Models
@using ExpenseTracker.Service
@using KavaPryct.Services
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@inject ExpenseDataService ExpenseDataServices

<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }

    .content.container-fluid {
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
    }

    @@media (min-width: 1100px) {
        .rightpane {
            margin-right: 270px;
        }
    }

    @@media (max-width: 1100px) {
        .rightpane {
            margin-right: 0px;
        }
    }

    @@media (min-width: 768px) {
        .content .content-wrapper {
            padding: 0;
        }
    }

    @@media (max-width: 768px) {
        .content .content-wrapper {
            padding: 0 8px 8px 8px;
            margin-top: 7rem;
        }
    }

    .content.container-fluid {
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
    }

    /* skeleton */
    .e-skeleton.e-skeleton-text, .e-skeleton.e-skeleton-square, .e-skeleton.e-skeleton-rectangle, .e-skeleton.e-skeleton-circle {
        background-color: #83808014;
    }

    .search-skeleton {
        height: 30px;
        width: 100%;
        margin: 40px 15px 15px 15px;
    }

    .expense-grid-skeleton {
        height: 80%;
        width: 100%;
        margin: 0px 10px 10px 15px;
    }

    .filter-skeleton {
        position: absolute;
        top: 0px;
        right: 0px;
        width: 251px;
        height: 100%;
    }

    @@media (max-width:1101px) {
        .filter-skeleton {
            display: none;
        }
    }

    @@media (max-width:768px) {
        .search-skeleton {
            margin: 106px 0px 10px 0px;
        }

        .expense-grid-skeleton {
            margin: 10px 0px 10px;
        }
    }

    /* Encabezado de grid */
    .expense-grid-container {
        background: #fff;
        border-radius: 10px;
        overflow: hidden;
    }

    .expense-head-padding {
        padding: 14px 16px;
    }

    .search-wrapper {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 12px;
    }

    .search-section {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .txt {
        min-width: 260px;
    }

    .button-section .e-btn.small {
        height: 32px;
    }

    .add-head-item {
        vertical-align: middle;
    }
</style>

@if (isDataLoaded)
{
    <div class="expense-page">
        <div class='exp-content-container'>
            <div>
                <p class="page-title">All Transactions</p>
            </div>

            <div>
                <div class="col-md-12 margin-top col-lg-12">
                    <div class="expense-grid-container">
                        <div class="expense-head-padding" style="background-color: @headColor;">
                            <div class="search-wrapper search-section" style="display: @headVisibility;">
                                <div id="search">
                                    <SfTextBox Type="InputType.Search"
                                               ShowClearButton="true"
                                               Placeholder="Search"
                                               CssClass="search txt"
                                               @bind-Value="SearchValue"
                                               ValueChange="@(async () => await ContentRef.Search(SearchValue))"
                                               Created="OnCreate">
                                    </SfTextBox>
                                    <span id="searchbtn"
                                          class="e-search-icon expense-search-icon e-icons"
                                          @onclick="() => ContentRef.Search(SearchValue)"></span>
                                </div>

                                <div class="button-section search-section">
                                    <button id="addexpense" class="e-btn small e-info" @onclick="() => DialogRef.ShowAddDialog()">Add Transaction</button>
                                    <button id="filterExpense" class="e-btn small e-info" @onclick="() => FilterRef.ShowFilterMenu()">Filter</button>
                                    <div id="add-btn" class='e-btn' @onclick="() => DialogRef.ShowAddDialog()">
                                        <span class='e-icons add-icon add-head-item'></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <TransactGrid @ref="ContentRef"></TransactGrid>
                    </div>
                </div>
            </div>
        </div>

        <FilterMenu @ref="FilterRef"></FilterMenu>
        <TransactDialog @ref="DialogRef"></TransactDialog>
    </div>
}
else
{
    <div class="search-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="30px" Width="100%"></SfSkeleton>
    </div>
    <div class="expense-grid-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="700px" Width="100%"></SfSkeleton>
    </div>
    <div class="filter-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="815px" Width="100%"></SfSkeleton>
    </div>
}

@code {
    // Estado UI
    private bool isDataLoaded = false;
    private string SearchValue = string.Empty;
    private string headColor = "#f7f9ff";       // color de fondo del encabezado
    private string headVisibility = "block";     // mostrar/ocultar cabecera

    // Refs a tus componentes
    private TransactGrid ContentRef;
    private FilterMenu FilterRef;
    private TransactDialog DialogRef;

    protected override async Task OnInitializedAsync()
    {
        // Suscríbete a cambios globales del servicio (cuando Expense/Schedule guarden, o cambies el rango)
        ExpenseDataServices.OnChanged += OnServiceChanged;

        // Carga inicial desde Back4App para la ventana actual del servicio
        await ExpenseDataServices.ReloadWindowAsync();

        isDataLoaded = true;
    }

    private void OnServiceChanged()
    {
        // Cuando cambien los datos globales, refresca los hijos si es necesario
        InvokeAsync(async () =>
        {
            // Si tu TransactGrid soporta recarga, llámala aquí (depende de tu implementación)
            await ContentRef?.ReloadAsync();

            StateHasChanged();
        });
    }

    private void OnCreate()
    {
        // Hook de Syncfusion TextBox si necesitas algo al crear el control
    }

    // Helpers públicos que pueden invocar tus hijos si lo requieres:
    public async Task RefreshFromServer() => await ExpenseDataServices.ReloadWindowAsync();

    public void Dispose()
    {
        ExpenseDataServices.OnChanged -= OnServiceChanged;
    }
}
