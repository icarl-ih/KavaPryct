@page "/expense"
@using ExpenseTracker.Models
@using ExpenseTracker.Service
@using KavaPryct.Components.Models
@using KavaPryct.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel
@using Syncfusion.Blazor.SplitButtons
@inject ExpenseDataService ExpenseDataServices
@inject TransactionService transactionService
@inject EmpleadoRemoteService EmpleadoService
@inject IJSRuntime JS


<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }

    .content.container-fluid {
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
    }

    @@media (min-width: 1100px) {
        .rightpane {
            margin-right: 270px;
        }
    }

    @@media (max-width: 1100px) {
        .rightpane {
            margin-right: 0px;
        }
    }

    @@media (min-width: 768px) {
        .content .content-wrapper {
            padding: 0;
        }
    }

    @@media (max-width: 768px) {
        .content .content-wrapper {
            padding: 0 8px 8px 8px;
            margin-top: 7rem;
        }
    }

    .content.container-fluid {
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
    }

    /* skeleton */
    .e-skeleton.e-skeleton-text, .e-skeleton.e-skeleton-square, .e-skeleton.e-skeleton-rectangle, .e-skeleton.e-skeleton-circle {
        background-color: #83808014;
    }

    .search-skeleton {
        height: 30px;
        width: 100%;
        margin: 40px 15px 15px 15px;
    }

    .expense-grid-skeleton {
        height: 80%;
        width: 100%;
        margin: 0px 10px 10px 15px;
    }

    .filter-skeleton {
        position: absolute;
        top: 0px;
        right: 0px;
        width: 251px;
        height: 100%;
    }

    @@media (max-width:1101px) {
        .filter-skeleton {
            display: none;
        }
    }

    @@media (max-width:768px) {
        .search-skeleton {
            margin: 106px 0px 10px 0px;
        }

        .expense-grid-skeleton {
            margin: 10px 0px 10px;
        }
    }

    /* Encabezado de grid */
    .expense-grid-container {
        background: #fff;
        border-radius: 10px;
        overflow: hidden;
    }

    .expense-head-padding {
        padding: 14px 16px;
    }

    .search-wrapper {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 12px;
    }

    .search-section {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .txt {
        min-width: 260px;
    }

    .button-section .e-btn.small {
        height: 32px;
    }

    .add-head-item {
        vertical-align: middle;
    }
</style>

@if (isDataLoaded)
{
    <div class="expense-page">
        <div class='exp-content-container'>
            <div class="control-section">
                <KavaPryct.Components.Pages.Dashboard.ExpCards></KavaPryct.Components.Pages.Dashboard.ExpCards>
            </div>
            <div>
                <p class="page-title">Transacciones</p>
            </div>
            <div>
                <div class="col-md-12 margin-top col-lg-12">
                    <div class="expense-grid-container">
                        <div class="expense-head-padding" style="background-color: @color;">
                            <div class="search-wrapper search-section" style="display: @visibility;">
                                <div id="search">
                                    <SfTextBox Type="InputType.Search" ShowClearButton="true" Placeholder="Search" CssClass="search txt" @bind-Value="SearchValue" ValueChange="@(async () => await this.ContentRef.Search(SearchValue))" Created="OnCreate"></SfTextBox>
                                    <span id="searchbtn" class="e-search-icon expense-search-icon e-icons" @onclick="@(() => this.ContentRef.Search(SearchValue))"></span>
                                </div>
                                <div class="button-section search-section">
                                    <button id="addexpense" class="e-btn small e-info" @onclick="@(() => this.DialogRef.ShowAddDialog())">Add Transaction</button>
                                    <button id="filterExpense" class="e-btn small e-info" @onclick="@(() => this.FilterRef.ShowFilterMenu())">Filter</button>
                                    <div id="add-btn" class='e-btn' @onclick="@(() => this.DialogRef.ShowAddDialog())">
                                        <span class='e-icons add-icon add-head-item'></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <TransactGrid @ref="ContentRef"  
                            OnEdit="HandleEdit"
                            OnDelete="HandleDelete"></TransactGrid>

                        <div class="mt-4 p-3 border rounded-3">
                            <div class="d-flex align-items-end gap-3 flex-wrap">
                                <div>
                                    <label class="form-label mb-1">Porcentaje de salario (%)</label>
                                    <SfNumericTextBox @bind-Value="SalaryPercent"
                                                      TValue="decimal"
                                                      Min="0" Max="100"
                                                      Decimals="2"
                                                      Placeholder="Ej. 10 para 10%" />
@*                                     <div class="form-text">Se guarda automáticamente; puedes editarlo cuando quieras.</div>
 *@                                </div>
                                <div>
                                  <label class="form-label mb-1">Rango de fechas</label>
                                  <SfDateRangePicker TValue="DateTime?"
                                                     Placeholder="dd/MM/yyyy"
                                                     Format="dd/MM/yyyy"
                                                     Separator=" a "
                                                     ShowClearButton="true"
                                                     @bind-StartDate="RangeStart"
                                                     @bind-EndDate="RangeEnd">
                                    <!-- Presets útiles -->
                                    <DateRangePickerPresets>

                                            <DateRangePickerPreset Label="Hoy" Start="DateTime.Today" End="DateTime.Today" />
                                            <DateRangePickerPreset Label="Últimos 7 días" Start="DateTime.Today.AddDays(-6)" End="DateTime.Today" />
                                            <DateRangePickerPreset Label="Este mes" Start="new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1)" End="DateTime.Today" />
                                            <DateRangePickerPreset Label="Mes anterior"
                                              Start="new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(-1)"
                                              End="new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddDays(-1)" />
                                    </DateRangePickerPresets>

                                    <!-- (Opcional) reaccionar al cambio de rango -->
                                    <DateRangePickerEvents TValue="DateTime?"
                                                           ValueChange="@( (RangePickerEventArgs<DateTime?> e) => OnRangeChanged(e) )" />
                                  </SfDateRangePicker>
                                </div>
                                <div class="d-flex gap-2">
                                    <SfProgressButton Content="Calcular salarios" IsPrimary="true" CssClass="e-primary" OnClick="CalculateSalaries"></SfProgressButton>
                                    <SfButton CssClass="e-outline" OnClick="ClearResults" IsPrimary="false">Limpiar</SfButton>
                                </div>
                            </div>

                            @if (Rows?.Count > 0)
                            {
                                <div class="mt-3">
                                    <SfGrid DataSource="Rows" AllowPaging="true" AllowSorting="true">
                                        <GridColumns>
                                            <GridColumn Field=@nameof(SalaryRow.ShortName) HeaderText="Empleado" Width="160"></GridColumn>
                                            <GridColumn Field=@nameof(SalaryRow.RoleLabel) HeaderText="Rol" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(SalaryRow.Cash) HeaderText="Efectivo" Format="C2" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(SalaryRow.Transfer) HeaderText="Transferencia" Format="C2" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(SalaryRow.Card) HeaderText="Tarjeta" Format="C2" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                                            <GridColumn Field=@nameof(SalaryRow.Total) HeaderText="Total Ingresos" Format="C2" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(SalaryRow.SuggestedSalary) HeaderText="Salario sugerido" Format="C2" TextAlign="TextAlign.Right" Width="170"></GridColumn>
                                        </GridColumns>
                                        
                                    </SfGrid>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
@*         <FilterMenu @ref="FilterRef"></FilterMenu>*@
           <TransactDialog @ref="DialogRef" OnSaved="HandleSaved" OnCancel="HandleCancel"></TransactDialog>
    </div>
}
else
{
    <SfMessage Severity="@currentSeverity" Visible="Isvisible">@SfMessageText</SfMessage>

    <div class="search-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="30px" Width="100%"></SfSkeleton>
    </div>
    <div class="expense-grid-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="700px" Width="100%"></SfSkeleton>
    </div>
    <div class="filter-skeleton">
        <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="815px" Width="100%"></SfSkeleton>
    </div>
}

@code {
    // Estado del rango (nullable)
    private DateTime? RangeStart { get; set; }
    private DateTime? RangeEnd { get; set; }
    private bool Isvisible = false;
    private MessageSeverity currentSeverity = MessageSeverity.Info;
    private string SfMessageText;
    // (Opcional) si quieres reaccionar a cada cambio del rango
    private void OnRangeChanged(RangePickerEventArgs<DateTime?> e)
    {
        RangeStart = e.StartDate;
        RangeEnd = e.EndDate;
        // Si prefieres recalcular automáticamente:
        // _ = CalculateSalaries();
        StateHasChanged();
    }

    private static DateTime EndOfDay(DateTime d)
        => d.Date.AddDays(1).AddTicks(-1);

    // Si quieres conservar el nombre GetTxnDate:
    private static DateTime GetTxnDate(ExpenseData t) => t?.dateTime ?? default;




    // Estado UI
    private bool isDataLoaded = false;
    private string SearchValue = string.Empty;
    private string color = "#f7f9ff";       // color de fondo del encabezado
    private string visibility = "block";     // mostrar/ocultar cabecera

    // Refs a tus componentes
    private TransactGrid ContentRef;
    private FilterMenu FilterRef;
    private TransactDialog DialogRef;


    // Porcentaje persistido (ej. 10 = 10%)
    private decimal SalaryPercent { get; set; } = 35m;

    // Resultado del cálculo
    private List<SalaryRow> Rows = new();

    // Clave en localStorage
    private const string SalaryPctKey = "expense.salaryPercent";

    protected override async Task OnInitializedAsync()
    {
        CommonService.OnlineStatusChanged += HandleOnlineChanged;
        // Suscríbete a cambios globales del servicio (cuando Expense/Schedule guarden, o cambies el rango)
        ExpenseDataServices.OnChanged += OnServiceChanged;

        // Carga inicial desde Back4App para la ventana actual del servicio
        await ExpenseDataServices.ReloadWindowAsync();

        isDataLoaded = true;
    }
    private void HandleOnlineChanged(object? sender, bool online)
    {
        isDataLoaded = online;
        Isvisible = !online;
        if (!online)
        {
            SfMessageText = "Sin Conexión a Internet";
            currentSeverity = MessageSeverity.Info;
        }


        InvokeAsync(StateHasChanged);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Carga porcentaje guardado (si existe)
            try
            {
                var stored = await JS.InvokeAsync<string>("snf_getLocal", SalaryPctKey);
                if (!string.IsNullOrWhiteSpace(stored) && decimal.TryParse(stored, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out var val))
                {
                    SalaryPercent = Math.Clamp(val, 0m, 100m);
                    StateHasChanged();
                }
            }
            catch { /* ignora si aún no existe helper JS */ }
        }

        // Guarda cada vez que cambia (pequeña auto-sync)
        await PersistPercent();
    }

    private async Task PersistPercent()
    {
        try
        {
            await JS.InvokeVoidAsync("snf_setLocal", SalaryPctKey, SalaryPercent.ToString(System.Globalization.CultureInfo.InvariantCulture));
        }
        catch { /* sincr. best-effort */ }
    }
    private void OnServiceChanged()
    {
        // Cuando cambien los datos globales, refresca los hijos si es necesario
        InvokeAsync(async () =>
        {
            // Si tu TransactGrid soporta recarga, llámala aquí (depende de tu implementación)
            await ContentRef?.ReloadAsync();
            InvokeAsync(StateHasChanged);        
        });
    }
    // --------- Handlers ---------

    // Abrir diálogo de edición desde el grid
    private void HandleEdit(ExpenseData row)
        => DialogRef.ShowEditDialog(row);

    // Eliminar en Back4App y refrescar
    private async Task HandleDelete(ExpenseData row)
    {
        if (!string.IsNullOrWhiteSpace(row.ObjectId))
        {
            await transactionService.DeleteTransactionAsync(row.ObjectId);
            await ExpenseDataServices.ReloadWindowAsync();
        }
    }

    // Guardar (create/update) según tenga ObjectId
    private async Task HandleSaved(ExpenseData model)
    {
        // Asegura "Otros gastos" completo en egresos sin empleado
        if (model.TransactionTypeId == (int)Giro.Egreso &&
            string.IsNullOrWhiteSpace(model.EmployeeObjectId))
        {
            model.EmployeeObjectId = "OTROS";
            model.EmployeeName = "Otros gastos";
        }
        model.DatFecha ??= new FechaModel{Iso = model.dateTime};
        // Persistir
        if (string.IsNullOrWhiteSpace(model.ObjectId))
            await transactionService.CreateMovementeAsync(model);
        else
            await transactionService.UpdateTransactionAsync(model);

        await ExpenseDataServices.ReloadWindowAsync(); // refresca todo el dashboard/expense
    }

    private Task HandleCancel()
    {
        // nada en especial: el dialog ya se cierra solo
        return Task.CompletedTask;
    }


    private void OnCreate()
    {
        // Hook de Syncfusion TextBox si necesitas algo al crear el control
    }

    private async Task OnSaved(ExpenseData model)
    {
        if (string.IsNullOrWhiteSpace(model.ObjectId))
            await transactionService.CreateMovementeAsync(model);
        else
            await transactionService.UpdateTransactionAsync(model);

        await ExpenseDataServices.ReloadWindowAsync(); // vuelve a leer B4A (rango activo)
    }

    private async Task OnDelete(ExpenseData item)
    {
        if (!string.IsNullOrWhiteSpace(item.ObjectId))
        {
            await transactionService.DeleteTransactionAsync(item.ObjectId);
            await ExpenseDataServices.ReloadWindowAsync();
        }
    }

    private async Task CalculateSalaries()
    {
        // Asegura persistencia antes de calcular
        await PersistPercent();

        Rows = new();
        var transactions = await transactionService.GetAllTransactionsAsync();

        // Normaliza rango local
        DateTime? start = RangeStart?.Date;
        DateTime? end = RangeEnd?.Date;
        if (start.HasValue && end.HasValue && start > end)
        { var tmp = start; start = end; end = tmp; }

        DateTime? endIncl = end.HasValue ? EndOfDay(end.Value) : (DateTime?)null;

        // Filtro por fecha local + solo ingresos
        var filtradas = transactions.Where(t =>
        {
            if (t is null) return false;
            var dt = t.dateTime;                // <<=== LOCAL
            if (dt == default) return false;
            if (start.HasValue && dt < start.Value) return false;
            if (endIncl.HasValue && dt > endIncl.Value) return false;
            return true;
        });

        var ingresos = filtradas.Where(t => t.TransactionTypeId == 1);

        // Join con empleados RoleId == 1
        List<EmpleadosModel> empleadosAll = await EmpleadoService.GetAllPsicosAsync();
        var empleadosDict = empleadosAll
            .Where(e => e.RolEmpleo == 1 && !string.IsNullOrWhiteSpace(e.ObjectId))
            .GroupBy(e => e.ObjectId!)                // por si hubiera duplicados de ObjectId
            .ToDictionary(g => g.Key, g => g.First()); // toma el primero

        // Agrupamos por empleado
        var query =
        from t in ingresos
        where !string.IsNullOrWhiteSpace(t.EmployeeObjectId)
              && empleadosDict.ContainsKey(t.EmployeeObjectId!)
        group t by t.EmployeeObjectId! into g
        let emp = empleadosDict[g.Key]
        let cash = g.Where(x => IsCash(x.PayMethodId)).Sum(x => x.Amount)
        let transfer = g.Where(x => IsTransfer(x.PayMethodId)).Sum(x => x.Amount)
        let card = g.Where(x => IsCard(x.PayMethodId)).Sum(x => x.Amount)
        let total = cash + transfer + card
        orderby emp.NombreCorto
        select new SalaryRow
        {
            EmployeeId = g.Key, // ObjectId del empleado
            ShortName = emp.NombreCorto,
            RoleId = emp.RolEmpleo,                         // <- int
            RoleLabel = GetEnumDisplayName<RolEmpleo>(emp.RolEmpleo), // <- string desde enum
            Cash = cash,
            Transfer = transfer,
            Card = card,
            Total = total,
            SuggestedSalary = Math.Round(total * (SalaryPercent / 100m), 2)
        };

            Rows = query.Where(r => r.Total > 0m).ToList();
            StateHasChanged();

    }

    private void ClearResults() => Rows = new();

    // === Utilidades para mapear método de pago (ajusta a tus valores reales) ===
    private static bool IsCash(int? id) => id == 1;
    private static bool IsTransfer(int? id) => id == 2;
    private static bool IsCard(int? id) => id == 3;

    // === Tipos de ejemplo: ajusta a tus modelos ===
    public class SalaryRow
    {
        public string EmployeeId { get; set; } = "";
        public string ShortName { get; set; } = "";
        public int RoleId { get; set; }          // int crudo
        public string RoleLabel { get; set; } = "";    // texto para UI
        public decimal Cash { get; set; }
        public decimal Transfer { get; set; }
        public decimal Card { get; set; }
        public decimal Total { get; set; }
        public decimal SuggestedSalary { get; set; }
    }
    private static string GetEnumDisplayName<TEnum>(int value) where TEnum : struct, Enum
    {
        if (!Enum.IsDefined(typeof(TEnum), value))
            return $"Rol {value}";

        var enumVal = (Enum)(object)(TEnum)(object)value;
        var memInfo = enumVal.GetType().GetMember(enumVal.ToString());
        if (memInfo.Length > 0)
        {
            var display = memInfo[0].GetCustomAttribute<DisplayAttribute>();
            if (!string.IsNullOrWhiteSpace(display?.GetName()))
                return display!.GetName()!;

            var desc = memInfo[0].GetCustomAttribute<DescriptionAttribute>();
            if (!string.IsNullOrWhiteSpace(desc?.Description))
                return desc!.Description!;
        }
        return enumVal.ToString();
    }

    // Helpers públicos que pueden invocar tus hijos si lo requieres:
    public async Task RefreshFromServer() => await ExpenseDataServices.ReloadWindowAsync();

    public void Dispose()
    {
        CommonService.OnlineStatusChanged += HandleOnlineChanged;
        ExpenseDataServices.OnChanged -= OnServiceChanged;
    }
}
