@page "/psicos"

@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using KavaPryct.Services
@using KavaPryct.Components.Models
@inject NavigationManager UriHelper
@inject EmpleadoRemoteService EmpleadoService

@if(isDataLoaded){
    <div class="deleted-msg">
        <SfMessage Severity="currentSeverity" Visible=@Service.ShowDeleteMsg>@SfMessageText</SfMessage>
    </div>
    <div id="doctors" class="doctors-wrapper">
        <header>
            <div class="module-title">
                <div class="title">Empleados</div>
                <div class="underline"></div>
            </div>
            <div class="add-doctor" @onclick="@onAddDoctor">
                <div class="e-icon-add e-icons"></div>
                <div class="add-doctor-label">Add New</div>
            </div>
        </header>
        <div class="specialization-detail-wrapper">
            <div class="specialization-types">
                @* <SfDropDownList @ref="specObj" TItem="Specialization" TValue="string" Width="200px" ShowClearButton="true" DataSource="@specializationData" Placeholder="Select a Specialization" PopupHeight="230px">
                    <DropDownListEvents TItem="Specialization" TValue="string" ValueChange="@onSpecializationChange"></DropDownListEvents>
                    <DropDownListFieldSettings Text="Text" Value="Id"></DropDownListFieldSettings>
                    <DropDownListTemplates TItem="Specialization">
                        <ItemTemplate>
                            <div class="specialist-value">
                                <span class="@((context as Specialization).Id)" style="background: @((context as Specialization).Color)"></span>
                                <span class="name">@((context as Specialization).Text)</span>
                            </div>
                        </ItemTemplate>
                        <ValueTemplate>
                            <div class="specialist-value department-value">
                                <span class="@((context as Specialization).Id)" style="background: @((context as Specialization).Color)"></span>
                                <span class="name">@((context as Specialization).Text)</span>
                            </div>
                        </ValueTemplate>
                    </DropDownListTemplates>
                </SfDropDownList> *@
                <SfButton CssClass="e-normal" @onclick="@onAddDoctor" IsPrimary="true">Nuevo Empleado</SfButton>
            </div>
                <div class="specialist-display">
                    @foreach (var data in empleados)
                    {
                        // Busca el estudio del empleado (si existe)
                        var estudioEmpleado = estudios.FirstOrDefault(s => s.ObjectId == data.EstudiosObjectId);

                        <div class="e-cards specialist-item"
                             id="Specialist_@(data.ObjectId)"
                             @onclick="@(e => onSpecialistClick(e, data.ObjectId))">

                            <div class="e-card-content">
                                <div class="specialist-image">
                                    @* <img class="profile" src="css/appoinment/assets/images/@(data.Text).png" alt="doctor" /> *@
                                    <span></span>
                                </div>
                            </div>

                            <div class="specialist-detail">
                                <div class="name">
                                    @{
                                        // Texto de prefijo (abreviaturas de posgrados o Abrv del estudio)
                                        string prefijo = "";

                                        if (estudioEmpleado is not null)
                                        {
                                            if (estudioEmpleado.Posgrados?.Any() == true)
                                                prefijo = string.Join(", ", estudioEmpleado.Posgrados.Select(p => p.Abrv?.ToUpperInvariant()).Where(a => !string.IsNullOrWhiteSpace(a)));
                                            else
                                                prefijo = estudioEmpleado.Abrv ?? "";
                                        }
                                    }
                                    <span>
                                        @(!string.IsNullOrWhiteSpace(prefijo) ? $"{prefijo} " : "") @data.NombreCorto
                                    </span>
                                </div>

                                @if (estudioEmpleado is not null && estudioEmpleado.Id != 0)
                                {
                                    <div class="education">
                                        @estudioEmpleado.Nombre?.ToUpper()
                                    </div>
                                }

                                @if (estudioEmpleado?.ClavePosgrado == true)
                                {
                                    <div class="specialist-experience">
                                        <div class="specialization">
                                            <span class="label-text">Especialización</span>
                                            <span class="specialization-text">
                                                @{
                                                    var esp = (estudioEmpleado.Posgrados?.Any() == true)
                                                    ? string.Join(", ", estudioEmpleado.Posgrados.Select(p => p.Nombre?.ToUpperInvariant()).Where(n => !string.IsNullOrWhiteSpace(n)))
                                                    : "SIN ESPECIALIZACIÓN (POSGRADO)";
                                                }
                                                @esp
                                            </span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

        </div>
    </div>

    <SfDialog Target="body" Width="390px" CssClass="new-doctor-dialog" IsModal="true" @bind-Visible="@isShowNewDialog" ShowCloseIcon="true" Header="@editHeader">
        <ChildContent>
            <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
                <EditForm class="new-doctor-form" Model="@doctorEditModel" OnValidSubmit="@handleSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div>
                        <div class="name-cantainer">
                            <SfTextBox CssClass="doctor-detail input-uppercase" Placeholder="Apellido Paterno" FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.A_Paterno"></SfTextBox>
                            <ValidationMessage For="@(() => doctorEditModel.A_Paterno)"></ValidationMessage>
                        </div>
                        <div class="name-cantainer">
                            <SfTextBox CssClass="doctor-detail input-uppercase" Placeholder="Apellido Materno" FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.A_Materno"></SfTextBox>
                            <ValidationMessage For="@(() => doctorEditModel.A_Materno)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="name-container">
                        <SfTextBox CssClass='doctor-name e-field input-uppercase' Placeholder='Nombre(s) del Empleado' FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.Nombres"></SfTextBox>
                        <ValidationMessage For="@(() => doctorEditModel.Nombres)" />
                    </div>
                    <div class="gender-container">
                        <div class="mobile" style="width:345px">
                            <SfMaskedTextBox CssClass="e-field with-icon-left" @ref="maskObj" Placeholder="Celular" FloatLabelType="@FloatLabelType.Always" Mask="(999) 999-9999" @bind-Value="@doctorEditModel.Telefono"></SfMaskedTextBox>
                            <ValidationMessage For="@(() => doctorEditModel.Telefono)" />
                        </div>
                    </div>
                    <div class="email-container">
                        <SfTextBox CssClass='e-field' Placeholder='Dirección (Ej. Calle ##, Colonia)' FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.Direccion"></SfTextBox>
                        <ValidationMessage For="@(() => doctorEditModel.Direccion)" />
                    </div>
                    <div class="email-container">
                        <SfDateTimePicker Placeholder="Fecha de Nacimiento" @bind-Value="@doctorEditModel.FechaNacLocal"></SfDateTimePicker>
                        <ValidationMessage For="@(() => doctorEditModel.FechaNac)"></ValidationMessage>
                    </div>
                    <div class="education-container">
                        <div class="department">
                            <label>Estado Civil</label>
                            <SfDropDownList TItem="KeyValuePair<int,string>" TValue="int"
                                            DataSource="@EdoCivil" @bind-Value="@doctorEditModel.EdoCivilId"
                                            PopupHeight="220px">

                                <DropDownListFieldSettings Text="Value" Value="Key"></DropDownListFieldSettings>
                            </SfDropDownList>

                        </div>
                        <div class="education" style="width:345px">
                            <label>Último grado de Estudios</label>
                            <SfDropDownList ID="estudiosint" TItem="KeyValuePair<int,string>" TValue="int"
                                            DataSource="@GdoEstudios" @bind-Value="@doctorEditModel.EstudiosLast"
                                            PopupHeight="220px">
                                <DropDownListFieldSettings Text="Value" Value="Key"></DropDownListFieldSettings>
                                <DropDownListEvents TItem="KeyValuePair<int,string>" TValue="int"
                                                    ValueChange="EstudiosChanged" />
                            </SfDropDownList>
                            @*                         <SfTextBox CssClass='e-field' Placeholder='Education' FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.Education"></SfTextBox>*@
                        </div>
                    </div>
                    @if (doctorEditModel.EstudiosLast != 0)
                    {
                        <!-- === Datos del ESTUDIO (siempre que sea != 0) === -->
                        <div class="education-container">
                            <h5 class="e-mb-2">Datos del estudio</h5>
                            <div class="department">
                                <div class="e-col-12">
                                    <label>Nombre del estudio</label>
                                    <SfTextBox @bind-Value="@estudioEditModel.Nombre" Placeholder="Ej. Licenciatura en Psicología" />
                                </div>
                                <div>
                                    <label>Abreviatura</label> <SfTextBox @bind-Value="@estudioEditModel.Abrv" Placeholder="Ej. L.Psic"></SfTextBox>
                                </div>
                                <div class="e-col-12">
                                    <label>Cédula</label>
                                    <SfTextBox @bind-Value="estudioEditModel.Cedula" Placeholder="Número de cédula (opcional)" />
                                </div>
                                <div class="e-col-12">
                                    <SfCheckBox @bind-Checked="estudioEditModel.ClavePosgrado" Label="Cuenta con Posgrado (Maestría/Doctorado)" />
                                </div>
                            </div>
                        </div>

                        @if (doctorEditModel.EstudiosLast == 4)
                        {
                            <!-- === POSGRADOS (solo cuando el valor es 4) === -->
                            <div class="education">

                                <div class="e-row e-g-2 e-mb-2 e-p-2 e-border">
                                    <SfRadioButton TChecked="string"
                                                   Label="Maestría"
                                                   Name="dlgTransactionType"
                                                   Value="1"
                                                   @bind-Checked="TipoStr" />

                                    <SfRadioButton TChecked="string"
                                                   Label="Doctorado"
                                                   Name="dlgTransactionType"
                                                   Value="2"
                                                   @bind-Checked="TipoStr" />
                                    <div class="e-col-7">
                                        <label>Nombre del posgrado</label>
                                        <SfTextBox @bind-Value="@posgradosEditModel.Nombre"
                                                   Placeholder="Ej. Maestría en Terapia Familiar" CssClass="input-style input-uppercase" />
                                    </div>
                                    <div class="e-col-7">
                                        <label>Abreviatura del posgrado</label>
                                        <SfTextBox @bind-Value="@posgradosEditModel.Abrv" CssClass="input-style input-uppercase"
                                                   Placeholder="Ej. M.T.F." />
                                    </div>
                                    <div class="e-col-4">
                                        <label>Cédula</label>
                                        <SfTextBox @bind-Value="posgradosEditModel.Cedula" CssClass="input-style input-uppercase"
                                                   Placeholder="Cédula (opcional)" />
                                    </div>

                                </div>

                            </div>

                        }
                    }
                    <div class="gender-container">
                        <div class="mobile">
                            <label>Rol de Empleo</label>
                            <SfDropDownList TItem="KeyValuePair<int,string>" TValue="int"
                                            DataSource="@RolEmpleo" @bind-Value="@doctorEditModel.RolEmpleo"
                                            PopupHeight="220px">
                                <DropDownListFieldSettings Text="Value" Value="Key"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>

                    </div>
                    <div class="e-mt-3 e-mb-2">
                        <SfCheckBox TValue="bool"
                                    Label="Añadir contacto de emergencia"
                                    Checked="@AddContactoEmergencia"
                                    CheckedChanged="@((bool v) => OnToggleContactoEmergencia(v))" />
                    </div>

                    <div class="e-card e-mt-3 e-p-2">
                        <div class="e-row e-g-2 e-mb-2 e-p-2 e-border">
                            <div class="e-col-7">
                                <label>Nombre del Contacto</label>
                                <SfTextBox @bind-Value="@ContactoEditModel.Nombre"
                                           Enabled="@AddContactoEmergencia"
                                           Placeholder="Nombre(s) y Primer Apellido"
                                           CssClass="input-style input-uppercase" />
                            </div>

                            <div class="e-col-7">
                                <label>Parentezco</label>
                                <SfTextBox @bind-Value="@ContactoEditModel.Parentezco"
                                           Enabled="@AddContactoEmergencia"
                                           CssClass="input-style input-uppercase" 
                                           Placeholder="Ej. Madre" />
                            </div>

                            <div class="e-col-4">
                                <SfMaskedTextBox CssClass="e-field with-icon-left"
                                                 @ref="contactoMaskObj"
                                                 Enabled="@AddContactoEmergencia"
                                                 Placeholder="Celular"
                                                 FloatLabelType="@FloatLabelType.Always"
                                                 Mask="(999) 999-9999"
                                                 @bind-Value="@ContactoEditModel.Celular" />
                            </div>
                        </div>
                    </div>

                    <div class="e-footer-content">
                        <div class="button-container">
                            <button type="button" class="e-btn e-normal" @onclick="@onCancelClick">Cancel</button>
                            <button type="submit" class="e-btn e-normal e-primary">Guardar</button>
                        </div>
                    </div>
                </EditForm>
        </ChildContent>
    </SfDialog>
}
else
{
    <SfMessage Severity="@currentSeverity" Visible="Isvisible">@SfMessageText</SfMessage>
    <div class="planner-doctor-skeleton">
        

        <div class="doctor-title-skeleton">
            <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="20%" Width="80%"></SfSkeleton>
            <br />
            <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="20%" Width="60%"></SfSkeleton>
            <br /><br />
        </div>
        @for (int i = 0; i < 3; i++)
        {
            <div class="container">
                <div class="sub-container1">
                    <div class="doctor-list-skeleton">
                        <div class="doct-img">
                            <SfSkeleton CssClass="listProfile" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Circle Width="76%" Height="73%"></SfSkeleton>
                        </div>
                        <div class="doct-details">
                            <SfSkeleton CssClass="listCtn" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Rectangle Height="12%" Width="115%"></SfSkeleton><br />
                            <SfSkeleton CssClass="listCtn" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Rectangle Height="12%" Width="115%"></SfSkeleton><br />
                            <SfSkeleton CssClass="distCtn" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Rectangle Height="12%" Width="86%"></SfSkeleton>
                        </div>
                    </div>
                </div>
                <div class="sub-container2">
                    <div class="doctor-list-skeleton">
                        <div class="doct-img">
                            <SfSkeleton CssClass="listProfile" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Circle Width="77%" Height="84%"></SfSkeleton>
                        </div>
                        <div class="doct-details">
                            <SfSkeleton CssClass="listCtn" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Rectangle Height="12%" Width="115%"></SfSkeleton><br />
                            <SfSkeleton CssClass="listCtn" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Rectangle Height="12%" Width="115%"></SfSkeleton><br />
                            <SfSkeleton CssClass="distCtn" Shape=Syncfusion.Blazor.Notifications.SkeletonType.Rectangle Height="12%" Width="86%"></SfSkeleton>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="planner-dashboard-skeleton device-skeleton">
        <div class="activities-skeleton">
            @for (int i = 0; i < 10; i++)
            {
                <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="3%" Width="80%"></SfSkeleton>
                <br />
                <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="3%" Width="60%"></SfSkeleton>
                <br />

                <br />
            }
        </div>
    </div>
}
<style>
    .input-uppercase input {
        text-transform: uppercase;
    }

    .e-control-wrapper.with-icon-left,
    .e-control-wrapper.with-icon-right {
        position: center;
    }

        /* Icono a la izquierda */
        .e-control-wrapper.with-icon-left input {
            padding:1.5em; /* deja espacio para el icono */
        }

        .e-control-wrapper.with-icon-left::before {
            content: '\ed53'; /* código del glifo */
            font-family: "fontello";
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 16px;
            height: 16px;
            opacity: .7;
            pointer-events: none;
        }


        /* Icono a la derecha */
        .e-control-wrapper.with-icon-right input {
            padding-right: 2rem;
        }

        .e-control-wrapper.with-icon-right::after {
            content: '\ed53';
            position: absolute;
            right: .5rem;
            top: 50%;
            transform: translateY(-50%);
            width: 16px;
            height: 16px;
            opacity: .7;
            pointer-events: none;
            background: url("/icons/search.svg") no-repeat center / 16px 16px;
        }

</style>
@code{

    [Inject]
    protected AppointmentService Service { get; set; }
    private bool Isvisible = false;
    private MessageSeverity currentSeverity = MessageSeverity.Info;
    private string SfMessageText;
    SfDropDownList<string, Specialization> specObj { get; set; }
    private List<EmpleadosModel> filteredDoctors { get; set; }
    private List<EmpleadosModel> empleados = new List<EmpleadosModel>();
    private List<EstudiosModel> estudios = new List<EstudiosModel>();
    private SfMaskedTextBox maskObj { get; set; }
    private EstudiosModel estudioEditModel = new EstudiosModel();
    private PosgradosModel posgradosEditModel = new PosgradosModel();
    private EmergContact ContactoEditModel = new EmergContact();
    private List<PosgradosModel> posgrados { get; set; } = new();
    private List<EmergContact> emergs { get; set; } = new();
    private bool editVisible { get; set; } = false;
    private EstudiosModel activeEstudio { get; set; }

    private EmpleadosModel activeData { get; set; }
    private string getSpecializationText { get; set; }
    private string getAvailability { get; set; }

    private List<Specialization> specializationData { get; set; }
    private EmpleadosModel doctorEditModel = new EmpleadosModel();
    private List<KeyValuePair<int, string>> RolEmpleo =>
    Enum.GetValues(typeof(RolEmpleo)).Cast<RolEmpleo>()
        .Select(r => new KeyValuePair<int, string>((int)r, r.ToString()))
        .ToList();

    private List<KeyValuePair<int, string>> EdoCivil =>
    Enum.GetValues(typeof(EstadoCivil))
        .Cast<EstadoCivil>()
        .Select(e => new KeyValuePair<int, string>((int)e, e.ToString()))
        .ToList();
    private List<KeyValuePair<int, string>> GdoEstudios =>
    Enum.GetValues(typeof(UltimoGradoEstudios))
        .Cast<UltimoGradoEstudios>()
        .Select(e => new KeyValuePair<int, string>((int)e, e.ToString()))
        .ToList();

    private bool isShowNewDialog { get; set; } = false;

    private string editHeader { get; set; } = "Nuevo Empleado";

    private List<TextIdData> experienceData { get; set; }

    private List<TextIdData> dutyTimings { get; set; }

    private bool isDataLoaded;

    protected override void OnInitialized()
    {
        ExpenseTracker.Service.CommonService.OnlineStatusChanged += HandleOnlineChanged;

        this.specializationData = Service.Specializations;
        this.experienceData = Service.Experience;
    }
    private void HandleOnlineChanged(object? sender, bool online)
    {
        isDataLoaded = online;
        Isvisible = !online;
        if (!online)
        {
            SfMessageText = "Sin Conexión a Internet";
            currentSeverity = MessageSeverity.Info;
        }


        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        ExpenseTracker.Service.CommonService.OnlineStatusChanged -= HandleOnlineChanged;
    }
    // Estado del checkbox (inicia en false)
    private bool AddContactoEmergencia { get; set; } = false;

    // Refs (evita reutilizar 'maskObj' para este otro MaskedTextBox)
    private SfMaskedTextBox? contactoMaskObj;

    private void OnToggleContactoEmergencia(bool value)
    {
        AddContactoEmergencia = value;

        // opcional: si se apaga, limpia los campos de contacto
        if (!AddContactoEmergencia)
        {
            ContactoEditModel.Nombre = string.Empty;
            ContactoEditModel.Parentezco = string.Empty;
            ContactoEditModel.Celular = string.Empty;
        }

        StateHasChanged();
    }


    private void EstudiosChanged(ChangeEventArgs<int, KeyValuePair<int, string>> args)
    {
        // Si cambia a 4 y no hay lista, inicializa con una fila
        if (args?.Value == 4 && (posgrados == null || posgrados.Count == 0))
            posgrados = new List<PosgradosModel> { new PosgradosModel() };

        // Si cambia a otro valor, puedes limpiar posgrados si gustas
        if (args?.Value != 4)
            posgrados = new List<PosgradosModel>();
    }
    private string TipoStr
    {
        get => (posgradosEditModel?.Id ?? (int)Especialidad.Maestria).ToString();
        set
        {
            if (int.TryParse(value, out var v))
                posgradosEditModel.Id = v;
        }
    }
    private void AgregarPosgrado()
    {
        emergs ??= new List<EmergContact>();
        emergs.Add(new EmergContact());
    }
    private void AgregarCnct()
    {
        posgrados ??= new List<PosgradosModel>();
        posgrados.Add(new PosgradosModel());
    }

    private void QuitarPosgrado(int idx)
    {
        if (posgrados is null) return;
        if (idx >= 0 && idx < posgrados.Count) posgrados.RemoveAt(idx);
    }
    private void Quitarcontacto(int idx)
    {
        if (emergs is null) return;
        if (idx >= 0 && idx < emergs.Count) emergs.RemoveAt(idx);
    }
    private void onAddDoctor(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        doctorEditModel = new EmpleadosModel();
        this.isShowNewDialog = true;
    }
    private bool isSaving = false;

    private async Task handleSubmit()
    {
        if (isSaving) return;
        isSaving = true; string emerg;
        try
        {

            doctorEditModel.MapearFechaNacParaServidor();
            var res = await EmpleadoService.CreateEmpleadoAsync(doctorEditModel);

            // Prefieren checar explícitamente "Created"
            if (res.Ok && string.Equals(res.Reason, "Created", StringComparison.OrdinalIgnoreCase))
            {
                var empleadoId = res.ObjectId; // úsalo aquí
                // ... continuar flujo
            }
            else
            {
                // Mensaje de error combinando Reason + cuerpo devuelto (si existe)
                SfMessageText = $"No se pudo crear el empleado. Motivo: {res.Reason}" +
                          (string.IsNullOrWhiteSpace(res.ErrorBody) ? "" : $" | Detalle: {res.ErrorBody}");

                currentSeverity = MessageSeverity.Error;
                Service.ShowDeleteMsg = true;
                // Muestra tu SfToast / diálogo con 'msg'
            }


            if (AddContactoEmergencia)
            {
                emerg = await EmpleadoService.CreateNewContactAsync(ContactoEditModel);
                doctorEditModel.ContEmergObjectId = emerg;

            }

            await EmpleadoService.CreatePosgradoAsync(posgradosEditModel);

            string estudios = await EmpleadoService.CreateEstudioAsync(estudioEditModel);
            
            doctorEditModel.EstudiosObjectId = estudios;


            

            

            // 2) Cerrar diálogo y actualizar lista local
            isShowNewDialog = false;

            // Inserta al principio para que se vea arriba
            
                empleados = await EmpleadoService.GetAllEmpleadosAsync();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // aquí puedes poner un Toast o SfMessage
            Console.WriteLine(ex);
        }
        finally
        {
            isSaving = false;
        }
    }

    public async void UpdateEditModel(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        // EmpleadosModel getHours = updateWorkHours(activeData);
        // string mobileNo = this.maskObj.GetMaskedValue();
        var activeEstudio = await Service.GetSpecialization(activeData.EstudiosObjectId); ;
        activeData = new EmpleadosModel
        {
            A_Materno = doctorEditModel.A_Materno,
            A_Paterno = doctorEditModel.A_Paterno,
            ContEmergObjectId = doctorEditModel.ObjectId,
            Direccion = doctorEditModel.Direccion,
            EdoCivilId = doctorEditModel.EdoCivilId,
            EstudiosObjectId = doctorEditModel.EstudiosObjectId,
            FechaNac = doctorEditModel.FechaNac,
            Nombres = doctorEditModel.Nombres,
            Telefono = doctorEditModel.Telefono
        };
        getSpecializationText = activeEstudio.Posgrados.Select(p => p.Nombre).ToString();
        // Service.Doctors[activeData.ObjectId] = activeData;
        string message = activeData.NombreCorto;
        editVisible = false;
        if (!string.IsNullOrEmpty(activeData.ObjectId))
        {
            // await EmpleadoService
        }
    }
    private EmpleadosModel updateWorkHours(EmpleadosModel data)
    {
        // string dutyString = dutyTimings.Where(item => item.Id.Equals(doctorEditModel.DutyTiming)).FirstOrDefault().Text;
        // string startHour;
        // string endHour;

        // if (dutyString == "10:00 AM - 7:00 PM")
        // {
        //     startHour = "10:00";
        //     endHour = "19:00";
        // }
        // else if (dutyString == "08:00 AM - 5:00 PM")
        // {
        //     startHour = "08:00";
        //     endHour = "17:00";
        // }
        // else
        // {
        //     startHour = "12:00";
        //     endHour = "21:00";
        // }
        return new EmpleadosModel { /* StartHour = startHour, EndHour = endHour */ };
    }

    private void onSpecialistClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args, string Id)
    {
        // UriHelper.NavigateTo($"/psicos/details/{Id}");
    }

    private int? selectedDepartmentId { get; set; }

    private void onSpecializationChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Specialization> eventArgs)
    {
        // List<Doctor> filteredData;
        // if (eventArgs.Value != null)
        // {
        //     this.selectedDepartmentId = eventArgs.ItemData.DepartmentId;
        //     filteredData = Service.Doctors.Where(i => i.Specialization.Equals(eventArgs.ItemData.Id)).ToList();
        // }
        // else
        // {
        //     this.selectedDepartmentId = null;
        //     filteredData = Service.Doctors;
        // }
        // filteredDoctors = filteredData;
    }
    private void onCancelClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        this.isShowNewDialog = false;
    }

    private async void LoadData()
    {
        this.dutyTimings = Service.DutyTimings;
        this.empleados = await EmpleadoService.GetAllPsicosAsync();
        this.estudios = await EmpleadoService.GetEstudiosWithPosgradosAsync();
        await Task.Delay(500);
        isDataLoaded = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadData();
        }
        if (Service.ShowDeleteMsg && isDataLoaded)
        {
            await Task.Delay(1000);
            Service.ShowDeleteMsg = false;
            StateHasChanged();
        }
    }
}