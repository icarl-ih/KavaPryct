@page "/psicos/details/{id}"

@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@using KavaPryct.Components.Models
@using KavaPryct.Services
@using Microsoft.AspNetCore.Components.Forms;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@inject SfDialogService DialogService
@inject NavigationManager UriHelper
@implements IDisposable;

<link href="css/appoinment/doctordetails.css" rel="stylesheet" />
<div class="doctor-details-container">
    <header>
        <div class="detail-header-title">
            <span class="back-icon icon-previous" @onclick="@onBackIconClick"></span>
            <div class="module-title">
                <div class='title'>DOCTOR DETAILS</div>
                <div class='underline'></div>
            </div>
        </div>
        <div class='doctor-detail'>
            <SfButton Disabled="@((activeData != null) ? false : true)" CssClass="e-small delete-details" @onclick="@onDoctorDelete">Delete</SfButton>
            <SfButton Disabled="@((activeData != null) ? false : true)" CssClass="e-small edit-details" @onclick="@onDoctorEdit">Edit</SfButton>
        </div>
    </header>
    @if (activeData != null) { 
    <div class="active-doctor">
        @* <div class="active-doctor-image">
            <img class="value" src="css/appoinment/assets/images/@(activeData.Text).png" alt="doctor" />
            <span class='availability @(activeData.Availability)'></span>
        </div> *@
        <div class="active-doctor-info">
            <div class="basic-detail info-field-container">
                <div class="name">@((activeEstudio.Posgrados?.Any() ?? false)? string.Join(", ",activeEstudio.Posgrados.Select(ps=>ps.Abrv.ToUpperInvariant())):activeEstudio.Abrv) @activeData.NombreCorto</div>
                <div class="education">@(activeEstudio.Nombre != null ? activeEstudio.Nombre.ToUpper(): "")</div>
            </div>
            <div class="speciality-detail info-field-container">
                <div class="label-text">Specialization</div>
                <div class="specialization">@getSpecializationText</div>
            </div>
            
            <div class="work-availability info-field-container">
                <div class="label-text">Availability</div>
                <div class="available-days">@getAvailability</div>
            </div>
            <div class="contact-info info-field-container">
                <div class="label-text">Mobile</div>
                <div class="mobile">@activeData.Telefono</div>
            </div>
        </div>
        @* <div class="work-days-container">
            <div class="work-days-content">
                <div class='work-day-item'>
                    @foreach (var data in activeData.WorkDays)
                    {
                        <div class="day-name">@(data.Day.Substring(0, 1).ToUpper())@data.Day.Substring(1)</div>
                        <div class="day-break-hours @(data.State)">@(getBreakDetails(data))</div>
                    }
                </div>
            </div>
        </div> *@
    </div>
    }
</div>

<Syncfusion.Blazor.Popups.SfDialogProvider/>

@if (editVisible)
{
<SfDialog Target="body" @ref="EdiDialogObj" Width="390px" CssClass='new-doctor-dialog' IsModal="true" @bind-Visible="@editVisible" ShowCloseIcon="true" Header="@editHeader">
    <ChildContent>
        <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
        <EditForm class="new-doctor-form" Model="@doctorEditModel" OnValidSubmit="@handleSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div>
                <div class="name-cantainer">
                    <SfTextBox class="doctor-detail" Placeholder="Apellido Paterno" FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.A_Paterno"></SfTextBox>
                    <ValidationMessage For="@(() => doctorEditModel.A_Paterno)"></ValidationMessage>
                </div>
                <div class="name-cantainer">
                        <SfTextBox class="doctor-detail" Placeholder="Apellido Materno" FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.A_Materno"></SfTextBox>
                        <ValidationMessage For="@(() => doctorEditModel.A_Materno)"></ValidationMessage>
                </div>
            </div>
            <div class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='Nombre(s) del Empleado' FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.Nombres"></SfTextBox>
                <ValidationMessage For="@(() => doctorEditModel.Nombres)" />
            </div>
            <div class="gender-container">
                <div class="mobile" style="width:345px">
                    <SfMaskedTextBox CssClass="e-field" @ref="maskObj" Placeholder="Celular" FloatLabelType="@FloatLabelType.Always" Mask="(999) 999-9999" @bind-Value="@doctorEditModel.Telefono"></SfMaskedTextBox>
                    <ValidationMessage For="@(() => doctorEditModel.Telefono)" />
                </div>
            </div>
            <div class="email-container">
                <SfTextBox CssClass='e-field' Placeholder='Dirección (Ej. Calle ##, Colonia)' FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.Direccion"></SfTextBox>
                <ValidationMessage For="@(() => doctorEditModel.Direccion)" />
            </div>
            <div class="email-container">
                <Syncfusion.Blazor.Calendars.SfDatePicker Placeholder="Fecha de Nacimiento" @bind-Value="@doctorEditModel.FechaNac"></Syncfusion.Blazor.Calendars.SfDatePicker>
                <ValidationMessage For="@(()=> doctorEditModel.FechaNac)"></ValidationMessage>
            </div>
            <div class="education-container">
                <div class="department">
                        <SfDropDownList TItem="KeyValuePair<int,string>" TValue="int"
                                        DataSource="@EdoCivil" @bind-Value="@doctorEditModel.EdoCivilId"
                                        PopupHeight="220px">
                            <DropDownListFieldSettings Text="Value" Value="Key"></DropDownListFieldSettings>
                        </SfDropDownList>
                        
                </div>
                <div class="education" style="width:345px">
                        <SfDropDownList ID="estudiosint" TItem="KeyValuePair<int,string>" TValue="int"
                                        DataSource="@GdoEstudios" @bind-Value="@doctorEditModel.EstudiosLast"
                                        PopupHeight="220px" >
                            <DropDownListFieldSettings Text="Value" Value="Key">
                            <DropDownListEvents TItem="KeyValuePair<int,string>" TValue="int"
                                                ValueChange="EstudiosChanged" />
                            </DropDownListFieldSettings>
                        </SfDropDownList>
@*                         <SfTextBox CssClass='e-field' Placeholder='Education' FloatLabelType="@FloatLabelType.Always" @bind-Value="@doctorEditModel.Education"></SfTextBox>*@
                 </div>
                    @if (doctorEditModel.EstudiosLast != 0)
                    {
                        <!-- === Datos del ESTUDIO (siempre que sea != 0) === -->
                        <div class="e-card e-mt-2 e-p-2">
                            <h5 class="e-mb-2">Datos del estudio</h5>
                            <div class="e-row e-g-2">
                                <div class="e-col-12">
                                    <label>Nombre del estudio</label>
                                    <SfTextBox @bind-Value="@estudioEditModel.Nombre" Placeholder="Ej. Licenciatura en Psicología" />
                                </div>
                                <div>
                                    <label>Abreviatura</label> <SfTextBox @bind-Value="@estudioEditModel.Abrv" Placeholder="Ej. L.Psic"></SfTextBox>
                                </div>
                                <div class="e-col-12">
                                    <label>Cédula</label>
                                    <SfTextBox @bind-Value="estudioEditModel.Cedula" Placeholder="Número de cédula (opcional)" />
                                </div>
                                <div class="e-col-12">
                                    <SfCheckBox @bind-Checked="estudioEditModel.ClavePosgrado" Label="Cuenta con Posgrado (Maestría/Doctorado)" />
                                </div>
                            </div>
                        </div>

                        @if (doctorEditModel.EstudiosLast == 4)
                        {
                            <!-- === POSGRADOS (solo cuando el valor es 4) === -->
                            <div class="e-card e-mt-3 e-p-2">
                                <div class="e-d-flex e-justify-content-between e-align-center e-mb-2">
                                    <h5 class="e-m-0">Posgrados</h5>
                                    <SfButton CssClass="e-primary e-small" IconCss="e-icons e-plus" OnClick="AgregarPosgrado">
                                        Agregar posgrado
                                    </SfButton>
                                </div>

                                @if (posgrados?.Count > 0)
                                {
                                    @for (var i = 0; i < posgrados.Count; i++)
                                    {
                                        var idx = i;
                                        <div class="e-row e-g-2 e-mb-2 e-p-2 e-border">
                                            <div class="e-col-7">
                                                <label>Nombre del posgrado</label>
                                                <SfTextBox ID=@($"posgrado-nombre-{idx}") @bind-Value="posgrados[idx].Nombre"
                                                           Placeholder="Ej. Maestría en Terapia Familiar" />
                                            </div>
                                            <div class="e-col-7">
                                                <label>Abreviatura del posgrado</label>
                                                <SfTextBox ID=@($"posgrado-nombre-{idx}") @bind-Value="posgrados[idx].Abrv"
                                                           Placeholder="Ej. M.T.F." />
                                            </div>
                                            <div class="e-col-4">
                                                <label>Cédula</label>
                                                <SfTextBox ID=@($"posgrado-cedula-{idx}") @bind-Value="posgrados[idx].Cedula"
                                                           Placeholder="Cédula (opcional)" />
                                            </div>
                                            <div class="e-col-1 e-d-flex e-align-end">
                                                <SfButton CssClass="e-danger e-small" IconCss="e-icons e-close"
                                                          OnClick="@(() => QuitarPosgrado(idx))" />
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="e-text-muted">No hay posgrados capturados.</div>
                                }
                            </div>
                            
                        }
                    }
            </div>
            <div class="e-card e-mt-3 e-p-2">
                <div class="e-d-flex e-justify-content-between e-align-center e-mb-2">
                    <h5 class="e-m-0">Contacto de Emergencia</h5>
                    <SfButton CssClass="e-primary e-small" IconCss="e-icons e-plus" OnClick="AgregarCnct">
                        Agregar Contacto
                    </SfButton>
                </div>

                @if (emergs?.Count > 0)
                {
                    @for (var i = 0; i < emergs.Count; i++)
                    {
                        var idx = i;
                        <div class="e-row e-g-2 e-mb-2 e-p-2 e-border">
                            <div class="e-col-7">
                                <label>Nombre del Contacto</label>
                                    <SfTextBox ID=@($"Emergcntct-nombre-{idx}") @bind-Value="emergs[idx].Nombre"
                                            Placeholder="Ej. Maestría en Terapia Familiar" />
                            </div>
                            <div class="e-col-7">
                                <label>Abreviatura del posgrado</label>
                                    <SfTextBox ID=@($"Emergcntct-celular-{idx}") @bind-Value="emergs[idx].Parentezco"
                                            Placeholder="Ej. M.T.F." />
                            </div>
                            <div class="e-col-4">
                                <label>Cédula</label>
                                <SfMaskedTextBox ID=@($"Emergcntct-celular-{idx}") CssClass="e-field" @ref="maskObj" Placeholder="Celular" FloatLabelType="@FloatLabelType.Always" Mask="(999) 999-9999" @bind-Value="emergs[idx].Celular"></SfMaskedTextBox>

                                
                            </div>
                            <div class="e-col-1 e-d-flex e-align-end">
                                <SfButton CssClass="e-danger e-small" IconCss="e-icons e-close"
                                            OnClick="@(() => QuitarPosgrado(idx))" />
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="e-text-muted">No hay posgrados capturados.</div>
                }
            </div>
            <div class="e-footer-content">
                <div class="button-container">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick">Cancel</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel">Save</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
}

@code{

    [Inject]
    protected AppointmentService Service { get; set; }
    [Parameter]
    public string Id { get; set; }

    SfDialog EdiDialogObj;
    private SfMaskedTextBox maskObj { get; set; }

    private bool editVisible { get; set; } = false;
    private EstudiosModel activeEstudio { get; set; }

    private EmpleadosModel activeData { get; set; }
    private string getSpecializationText { get; set; }
    private string getAvailability { get; set; }
    private List<KeyValuePair<int, string>> EdoCivil =>
    Enum.GetValues(typeof(EstadoCivil))
        .Cast<EstadoCivil>()
        .Select(e => new KeyValuePair<int, string>((int)e, e.ToString()))
        .ToList();
    private List<KeyValuePair<int, string>> GdoEstudios =>
    Enum.GetValues(typeof(UltimoGradoEstudios))
        .Cast<UltimoGradoEstudios>()
        .Select(e => new KeyValuePair<int, string>((int)e, e.ToString()))
        .ToList();


    protected override async Task OnInitializedAsync()
    {
        activeData = await Service.GetDoctorDetails(Id);
        activeData = (activeData == null) ? await Service.GetDoctorDetails(activeData.ObjectId) : activeData;
        var activeEstudio = await Service.GetSpecialization(activeData.EstudiosObjectId);
        getSpecializationText = activeEstudio.Posgrados.Select(ps => ps.Nombre).ToString();

        this.specializationData = Service.Specializations;
        this.experienceData = Service.Experience;
        this.dutyTimingsData = Service.DutyTimings;
    }
    private void onBackIconClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        UriHelper.NavigateTo("doctors/");
    }

    private string getBreakDetails(WorkDay data)
    {
        if (data.State == "TimeOff")
        {
            return "TIME OFF";
        }
        else if (data.State == "RemoveBreak")
        {
            return "---";
        }
        else
        {
            return Service.GetFormatDate((DateTime)data.BreakStartHour, "hh:mm tt") + "-" + Service.GetFormatDate((DateTime)data.BreakEndHour, "hh:mm tt");
        }
    }

    private async void onDoctorDelete(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to delete this doctor?", "Doctor Details", new DialogOptions()
        {
            ShowCloseIcon =true,
        });
        if (isConfirm)
        {
            this.deleteBtnClick(args);
            Service.ShowDeleteMsg = true;
        }
    }

    private void deleteBtnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        // Service.Doctors = Service.Doctors.Where(item => item.Id != activeData.Id).ToList();
        // Service.Hospitals = Service.Hospitals.Where(i => i.PsicoObjectId != activeData.Id).ToList();
        // Service.WaitingLists = Service.WaitingLists.Where(item => item.DepartmentId != activeData.DepartmentId).ToList();
        // if(Service.Doctors.Any())
        // {
        //     this.getSpecializationText = Service.Doctors[0].Specialization;
        // }
        onBackIconClick(args);
    }

    private void onDoctorEdit(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        // editVisible = true;
        // doctorEditModel.Name = activeData.Name;
        // doctorEditModel.Text = activeData.Text;
        // doctorEditModel.Id = activeData.Id;
        // doctorEditModel.Color = activeData.Color != null ? activeData.Color : "";
        // doctorEditModel.Gender = activeData.Gender;
        // doctorEditModel.Mobile = activeData.Mobile;
        // doctorEditModel.Email = activeData.Email;
        // doctorEditModel.DepartmentId = activeData.DepartmentId;
        // doctorEditModel.Education = activeData.Education;
        // doctorEditModel.Experience = activeData.Experience;
        // doctorEditModel.Designation = activeData.Designation;
        // doctorEditModel.DutyTiming = activeData.DutyTiming;
        // doctorEditModel.Specialization = activeData.Specialization;
    }

    private void onCancelClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible = false;
    }

    private EmpleadosModel doctorEditModel = new EmpleadosModel();
    private EstudiosModel estudioEditModel = new EstudiosModel();
    private PosgradosModel posgradosEditModel = new PosgradosModel();
    private string editHeader { get; set; } = "Edit Doctor";

    private List<TextIdData> experienceData { get; set; }

    private List<TextIdData> dutyTimingsData { get; set; }

    private List<Specialization> specializationData { get; set; }
    private List<PosgradosModel> posgrados { get; set; } = new();
    private List<EmergContact> emergs { get; set; } = new();

    // (Opcional) si quieres reaccionar al cambio del drop
    private void EstudiosChanged(ChangeEventArgs<int, KeyValuePair<int, string>> args)
    {
        // Si cambia a 4 y no hay lista, inicializa con una fila
        if (args?.Value == 4 && (posgrados == null || posgrados.Count == 0))
            posgrados = new List<PosgradosModel> { new PosgradosModel() };

        // Si cambia a otro valor, puedes limpiar posgrados si gustas
        if (args?.Value != 4)
            posgrados = new List<PosgradosModel>();
    }

    private void AgregarPosgrado()
    {
        emergs ??= new List<EmergContact>();
        emergs.Add(new EmergContact());
    }
    private void AgregarCnct()
    {
        posgrados ??= new List<PosgradosModel>();
        posgrados.Add(new PosgradosModel());
    }

    private void QuitarPosgrado(int idx)
    {
        if (posgrados is null) return;
        if (idx >= 0 && idx < posgrados.Count) posgrados.RemoveAt(idx);
    }
    private void Quitarcontacto(int idx)
    {
        if (emergs is null) return;
        if (idx >= 0 && idx < emergs.Count) emergs.RemoveAt(idx);
    }
    public async void UpdateEditModel(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        EmpleadosModel getHours = updateWorkHours(activeData);
        string mobileNo = this.maskObj.GetMaskedValue();
        var activeEstudio = await Service.GetSpecialization(activeData.EstudiosObjectId); ;
        activeData = new EmpleadosModel
        {
            A_Materno = doctorEditModel.A_Materno,
            A_Paterno = doctorEditModel.A_Paterno,
            ContEmergObjectId = doctorEditModel.ObjectId,
            Direccion = doctorEditModel.Direccion,
            EdoCivilId = doctorEditModel.EdoCivilId,
            EstudiosObjectId = doctorEditModel.EstudiosObjectId,
            FechaNac = doctorEditModel.FechaNac,
            Nombres = doctorEditModel.Nombres,
            Telefono = doctorEditModel.Telefono
        };
        getSpecializationText = activeEstudio.Posgrados.Select(p=>p.Nombre).ToString();
        // Service.Doctors[activeData.ObjectId] = activeData;
        string message = activeData.NombreCorto;
        editVisible = false;
    }

    private void handleSubmit()
    {
        editVisible = false;
    }
    private EmpleadosModel updateWorkHours(EmpleadosModel data)
    {
        

        // for (int i=0; i< data.WorkDays.Count;i++)
        // {
        //     var item = data.WorkDays[i];
        //     item.WorkStartHour = ((DateTime)item.WorkStartHour).AddHours(startValue);
        //     item.WorkEndHour = ((DateTime)item.WorkEndHour).AddHours(endValue);
        //     item.BreakStartHour = item.BreakStartHour;
        //     item.BreakEndHour = item.BreakEndHour;
        // }
        return new EmpleadosModel();
    }


    public void Dispose()
    {
        EdiDialogObj = null;
        maskObj = null;
    }

}