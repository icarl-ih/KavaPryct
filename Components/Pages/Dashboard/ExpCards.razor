@using ExpenseTracker.Models
@using ExpenseTracker.Service
@using KavaPryct.Services
@using static ExpenseTracker.Service.CommonService
@inject ExpenseDataService ExpenseDataService

<div class="row">
    <!-- tus divs EXACTOS -->
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="tolincome">@TotalIncome</h3><span class="card-text">Income</span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="tolexpense">@TotalExpense</h3><span class="card-text">Expenses</span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="tolbalance">@TotalBalance</h3><span class="card-text">Balance</span>
            </div>
        </div>
    </div>
    <div class="col-xs-6 col-xl-3 col-lg-3 col-md-3 col-sm-6 card-container">
        <div class="e-card card">
            <div class="e-card-content">
                <h3 class="card-value" id="toltransaction">@TotalTransactions</h3><span class="card-text">Transactions</span>
            </div>
        </div>
    </div>
</div>

@code {
    private string TotalIncome = "$0", TotalExpense = "$0", TotalBalance = "$0", TotalTransactions = "0";

    protected override async Task OnInitializedAsync()
    {
        ExpenseDataService.OnChanged += HandleChanged;
        await ExpenseDataService.ReloadWindowAsync(); // carga inicial si hace falta
        Recalc();
    }

    private void HandleChanged()
    {
        Recalc();
        InvokeAsync(StateHasChanged);
    }

    private void Recalc()
    {
        var win = ExpenseDataService.ExpenseData ?? new List<ExpenseData>();
        var inc = win.Where(x => x?.TransactionTypeId == (int)Giro.Ingreso).Sum(x => x!.Amount);
        var eg = win.Where(x => x?.TransactionTypeId == (int)Giro.Egreso).Sum(x => x!.Amount);

        TotalIncome = GetCurrencyVal(inc);
        TotalExpense = GetCurrencyVal(eg);
        TotalBalance = GetCurrencyVal(inc - eg);
        TotalTransactions = GetNumberVal(win.Count);
    }

    public void Dispose() => ExpenseDataService.OnChanged -= HandleChanged;
}
