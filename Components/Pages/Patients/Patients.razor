@page "/patients"

@using AppointmentPlanner.Data;
@using AppointmentPlanner.Models;
@using KavaPryct.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@using KavaPryct.Components.Models
@inject SfDialogService DialogService;
@inject EmpleadoRemoteService EmployeService
@inject PacienteService PacienteService
@inject CitasService citasService


@implements IDisposable;

@if (isDataLoaded)
{
<div class="deleted-msg">
    <SfMessage Severity="MessageSeverity.Success" Visible=@showDeleteMsg>The Patient's details have been deleted successfully.</SfMessage>
</div>
<div id="patients" class="planner-patient-wrapper">
    <header>
        <div class="module-title">
            <div class="title">Pacientes</div>
            <div class="underline"></div>
        </div>
        <div class="add-patient" @onclick="@onAddPatient">
            <div class="e-icon-add e-icons"></div>
            <div class="add-patient-label">Add New</div>
        </div>
    </header>
    <div class="patients-detail-wrapper">
        <div class="patient-operations">
            <div id="searchTemplate" class="search-wrapper planner-patient-search">
                <div class="e-input-group patient-search" role="search">
                    <input id="schedule_searchbar" class="e-input" name="input" type="text" @bind-value="@searchValue"
                           placeholder="Search Patient" @oninput="@patientSearch" />
                    <span class="e-clear-icon" aria-label="close" role="button" @onclick="clearText"></span>
                    <span id="schedule_searchbutton" class="e-input-group-icon search-icon e-icons" tabindex="-1"
                          title="Search" aria-label="search"></span>
                </div>
            </div>
           <SfButton CssClass="e-normal add-details" @onclick="@onAddPatient" IsPrimary="true">
                Add
                New Patient
            </SfButton>
        </div>
        <div class="patient-display">
                <SfGrid TItem="PacienteModel" @ref="gridObj" DataSource="@filteredPatients">
                    <GridEvents TValue="PacienteModel" RowSelected="onRowSelected" OnRecordDoubleClick="onDoubleClick"></GridEvents>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" Mode="EditMode.Normal" />
                    <GridColumns>
                        <GridColumn Field=@nameof(PacienteModel.ObjectId) IsPrimaryKey="true" Visible="false" />
                        <GridColumn Field=@nameof(PacienteModel.PacienteNombre) HeaderText="Nombre" Width="180" />
                        <GridColumn Field=@nameof(PacienteModel.PacienteCelular) HeaderText="Celular" Width="140" />
                        <GridColumn Field=@nameof(PacienteModel.PacienteTypeId) HeaderText="Paciente Tipo" Width="160">
                            <Template>
                                @{
                                    var p = (context as PacienteModel);
                                    var texto = Enum.IsDefined(typeof(TipoPaciente), p.PacienteTypeId)
                                    ? ((TipoPaciente)p.PacienteTypeId).ToString()
                                    : "-";
                                }
                                @texto
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(PacienteModel.MotivoConsulta) HeaderText="Motivo de Consulta" Width="240" />
                    </GridColumns>
                </SfGrid>

        </div>
    </div>
</div>

@if (activePatientData != null && showGridEditDialog)
{
        <SfDialog @ref="gridEditDialogObj" Target="body" Width="390px" @bind-Visible="@showGridEditDialog"
                  CssClass="e-edit-dialog" IsModal="true" ShowCloseIcon="true" Header="@gridEditHeader">
            <DialogAnimationSettings Effect="@DialogEffect.Zoom"></DialogAnimationSettings>

            <!-- Contenido del diálogo (no va dentro de DialogTemplates) -->
            <div class="grid-edit-dialog">
                <div class="field-row">
                    <label>Nombre del Paciente</label>
                    <span id="Name">@((activePatientData as PacienteModel)?.PacienteNombre)</span>
                </div>

                <div class="field-row">
                    <label>Celular</label>
                    <span id="Mobile">@((activePatientData as PacienteModel)?.PacienteCelular)</span>
                </div>

                <div class="field-row">
                    <label>Motivo Consulta</label>
                    <span id="Symptoms">@((activePatientData as PacienteModel)?.MotivoConsulta)</span>
                </div>

                <div class="field-row history-row">
                    <label>Appointment History</label>
                    <div id="history-wrapper">
                        @if (historyData is not null)
                        {
                            foreach (var item in historyData)
                            {
                                <div class="history-content">@getHistoryFormatDate(item)</div>
                            }
                        }
                    </div>
                </div>
            </div>

            <DialogTemplates>
                <FooterTemplate>
                    <div class="button-container" style="display:flex; gap:.5rem; justify-content:flex-end;">
                        <SfButton CssClass="e-normal" OnClick="onDeleteClick">Delete</SfButton>
                        <SfButton CssClass="e-normal" IsPrimary="true" OnClick="hideGridEditDialog">Edit</SfButton>
                    </div>
                </FooterTemplate>
            </DialogTemplates>
        </SfDialog>
    }

@if(IsShowPatientEditDialog) { 
<SfDialog @ref="dialogObj" Target="body" Width="390px" CssClass="new-patient-dialog" IsModal="true" @bind-Visible="@IsShowPatientEditDialog" ShowCloseIcon="true" Header="@patientHeader">
    <ChildContent>
        <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
        <EditForm Model="@patientEditModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="field-container name-container">
                <SfTextBox CssClass="patient-name e-field" Placeholder="Nombre Completo" FloatLabelType="@FloatLabelType.Always" @bind-Value="@patientEditModel.PacienteNombre"></SfTextBox>
                <ValidationMessage For="@(() => patientEditModel.PacienteNombre)" />
            </div>
            <div class="field-container gender-container">
                <div class="dob">
                            <label>Edad</label>

                    <SfNumericTextBox Placeholder="Edad" TValue="int" @bind-Value="patientEditModel.PacienteEdad" Min="0" Max="120"></SfNumericTextBox>
                    <ValidationMessage For="@(() => patientEditModel.PacienteEdad)" />
                </div>
            </div>
            <div class="field-container contact-container">
                <div class="mobile" style="width:345px">
                    <SfMaskedTextBox CssClass="e-field" @ref="maskObj" Placeholder="Celular" FloatLabelType="@FloatLabelType.Always" @bind-Value="@patientEditModel.PacienteCelular" Mask="(999) 999-9999"></SfMaskedTextBox>
                    <ValidationMessage For="@(() => patientEditModel.PacienteCelular)" />
                </div>
            </div>
            @* <div class="field-container email-container">
                <SfTextBox CssClass="e-field" Placeholder="Email" FloatLabelType="@FloatLabelType.Always" @bind-Value="@patientEditModel.em"></SfTextBox>
                <ValidationMessage For="@(() => patientEditModel.Email)" />
            </div> *@
            <div class="e-col-4">
                <label>Tipo de paciente</label>
                <SfDropDownList TItem="KeyValuePair<int,string>" TValue="int"
                                DataSource="@tipoPacienteOptions"
                                @bind-Value="patientEditModel.PacienteTypeId"
                                PopupHeight="220px">
                    <DropDownListFieldSettings Text="Value" Value="Key"></DropDownListFieldSettings>
                </SfDropDownList>
                <ValidationMessage For="@(() => patientEditModel.PacienteTypeId)"></ValidationMessage>
            </div>
            <div class="field-container symptom-container">
                <SfTextBox CssClass="e-field" Placeholder="Motivo de Consulta" FloatLabelType="@FloatLabelType.Always" @bind-Value="@patientEditModel.MotivoConsulta"></SfTextBox>
                <ValidationMessage For="@(() => patientEditModel.MotivoConsulta)" />
            </div>
            <div class="e-col-6">
                <label>Terapeuta</label>
                <SfDropDownList TItem="EmpleadosModel" TValue="string"
                                DataSource="@resourceDataSource"
                                @bind-Value="patientEditModel.PsicoObjectId"
                                PopupHeight="260px">
                    <DropDownListFieldSettings Text="NombreCorto" Value="ObjectId"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
            <div class="e-footer-content">
                <div class="button-container">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick">Cancel</button>
                    <button type="submit" class="e-btn e-normal e-primary">@saveButton</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
}

<Syncfusion.Blazor.Popups.SfDialogProvider/>
}
else
{
    <div class="planner-patient-skeleton">
        <div class="patients-container1">
             <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="15px" Width="97%"></SfSkeleton>
            <br/>
            <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="15px" Width="74%"></SfSkeleton>
        </div>
        <div class="patients-container2">
            <br/><br/>
            <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="256px" Width="97%"></SfSkeleton>
        </div>
    </div>
    <div class="planner-dashboard-skeleton device-skeleton">
        <div class="activities-skeleton">
            @for(int i=0; i < 10; i++)
            {
                <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="3%" Width="80%"></SfSkeleton>
                <br />
                <SfSkeleton Shape="Syncfusion.Blazor.Notifications.SkeletonType.Rectangle" Height="3%" Width="60%"></SfSkeleton>
                <br /><br />
            }
        </div>
    </div>
}

@code{
    [Inject]
    protected AppointmentService Service { get; set; }
    SfGrid<PacienteModel> gridObj;
    SfDialog dialogObj, gridEditDialogObj;
    private List<EmpleadosModel> resourceDataSource = new();

    private string searchValue { get; set; }
    private SfMaskedTextBox maskObj { get; set; }

    private PacienteModel patientEditModel { get; set; }
    private List<PacienteModel> filteredPatients { get; set; }

    private string saveButton { get; set; } = "Save";

    private List<CitasModel> historyData { get; set; }
    private bool isPatientClicked { get; set; } = false;

    private PacienteModel activePatientData { get; set; }

    private bool IsShowPatientEditDialog { get; set; } = false;
    private bool showGridEditDialog { get; set; } = false;
    private string patientHeader { get; set; }
    private string gridEditHeader { get; set; } = "Patient Details";

    private List<TextValueData> bloodGroupData { get; set; }

    private DateTime? dobValue { get; set; } = DateTime.Now;
    private List<EmpleadosModel> doctorsData { get; set; }
    public PacienteModel EditData { get; set; }

    private bool isDataLoaded;
    private bool showDeleteMsg { get; set; }
    private List<KeyValuePair<int, string>> tipoPacienteOptions =>
    Enum.GetValues(typeof(TipoPaciente))
        .Cast<TipoPaciente>()
        .Select(e => new KeyValuePair<int, string>((int)e, e.ToString()))
        .ToList();

    private object TipoPacienteAccessor(PacienteModel row, string colName)
    {
        return Enum.IsDefined(typeof(TipoPaciente), row.PacienteTypeId)
            ? ((TipoPaciente)row.PacienteTypeId).ToString() // o tu mapeo personalizado
            : "-";
    }
    protected override async Task OnInitializedAsync()
    {
        filteredPatients = await PacienteService.GetAllPacientesAsync();
        this.doctorsData = await EmployeService.GetAllPsicosAsync();
        resourceDataSource = await EmployeService.GetAllPsicosAsync();

    }

    private void onAddPatient(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        saveButton = "Save";
        patientEditModel = new PacienteModel();
        this.patientHeader = "New Patient";
        this.IsShowPatientEditDialog = true;
    }
    private async Task onCancelClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        await this.dialogObj.HideAsync();
    }
    public async Task HandleValidSubmit()
    {
        PacienteModel getRecord = null;
        string message = "";
        string name = "";
        string mobileNo = this.maskObj.GetMaskedValue();
        if (saveButton == "Save")
        {
            getRecord = new PacienteModel{
               PacienteNombre=patientEditModel.PacienteNombre,
               PacienteCelular = patientEditModel.PacienteCelular,
               PacienteEdad = patientEditModel.PacienteEdad,
               PacienteTypeId = patientEditModel.PacienteTypeId,
               PsicoObjectId = patientEditModel.PsicoObjectId,
               MotivoConsulta = patientEditModel.MotivoConsulta

            };
            var newpac = await PacienteService.CreatePacienteAsync(getRecord);
            if(newpac != null)
            {
                await gridObj.AddRecordAsync(getRecord, filteredPatients.Count());
                // filteredPatients = await PacienteService.GetAllPacientesAsync();
                message = " " + getRecord.PacienteNombre + " for " + getRecord.MotivoConsulta;
                name = "Added New Patient";
            }

        }
        else
        {
            try
            {
                getRecord = new PacienteModel
                {
                    PacienteNombre = patientEditModel.PacienteNombre,
                    PacienteCelular = patientEditModel.PacienteCelular,
                    PacienteEdad = patientEditModel.PacienteEdad,
                    PacienteTypeId = patientEditModel.PacienteTypeId,
                    PsicoObjectId = patientEditModel.PsicoObjectId,
                    MotivoConsulta = patientEditModel.MotivoConsulta

                };
                await PacienteService.UpdatePacienteAsync(getRecord);
                var indx = await gridObj.GetRowIndexByPrimaryKeyAsync(getRecord.ObjectId);
                await gridObj.UpdateRowAsync(indx, getRecord);
                message = " " + getRecord.PacienteNombre + " for " + getRecord.MotivoConsulta;
                name = "Updated Patient";
            }catch (Exception ex)
            {

            }

        }
        Service.Activities.Insert(0, new Activity { Name = name, Message = message, Time = "10 mins ago", Type = "patient", ActivityTime = DateTime.Now });
        await this.dialogObj.HideAsync();
    }

    public void onRowSelected(RowSelectEventArgs<PacienteModel> args)
    {
        if (isPatientClicked)
        {
            this.showDialog(args.Data);
            this.isPatientClicked = false;
        }
    }
    public void onDoubleClick(RecordDoubleClickEventArgs<PacienteModel> args)
    {
        this.showDialog(args.RowData);
    }
    private async void showDialog(PacienteModel data)
    {
        saveButton = "Update";
        showGridEditDialog = true;

        Service.ActivePatients = activePatientData = data;
        List<CitasModel> citas = await citasService.GetAllCitasAsync();
        var citascompletas = citas.Where(c => c.StatusCitaId == 10 && c.PacienteObjectId != null).ToList();
        historyData = citascompletas.Where(item => item.StatusCitaId == 10 && item.PacienteObjectId != null && item.PacienteObjectId.Equals(data.ObjectId)).ToList();
    }

    private async void onDeleteClick()
    {
        bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to delete this patient?", "Patient Details", new DialogOptions()
        {
            ShowCloseIcon =true,
        });
        if (isConfirm)
        {
            await this.DeleteBtnClick();
            this.showDeleteMsg = true;
            StateHasChanged();
        }
    }

    private void hideGridEditDialog()
    {
        showGridEditDialog = false;
        patientEditModel = new PacienteModel
        {
            PacienteNombre = activePatientData.PacienteNombre,
            PacienteCelular = activePatientData.PacienteCelular,
            PacienteEdad = activePatientData.PacienteEdad,
            PacienteTypeId = activePatientData.PacienteTypeId,
            PsicoObjectId = activePatientData.PsicoObjectId,
            MotivoConsulta = activePatientData.MotivoConsulta

        };
        this.patientHeader = "Edit Patient";
        this.IsShowPatientEditDialog = true;
    }

    private void onPatientClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs args, string Id)
    {
        this.isPatientClicked = true;
    }


    private void patientSearch(ChangeEventArgs e)
    {
        searchValue = e?.Value?.ToString() ?? "";
        if (string.IsNullOrWhiteSpace(searchValue))
            filteredPatients = patients.ToList();
        else
            filteredPatients = patients.Where(p =>
                (p.PacienteNombre ?? "").Contains(searchValue, StringComparison.OrdinalIgnoreCase) ||
                (p.MotivoConsulta ?? "").Contains(searchValue, StringComparison.OrdinalIgnoreCase)
            ).ToList();

        StateHasChanged();
    }


    private string getHistoryFormatDate(CitasModel data)
    {
        return Service.GetFormatDate(data.StartLocal, "MMMM dd") + "-" + Service.GetFormatDate(data.EndLocal, "hh:mm tt") + " Cita con" + getDoctorName(data.PsicoObjectId);
    }

    private async Task<string> getDoctorName(string Id)
    {
        var psico = await EmployeService.GetEmpleadoByIdAsync(Id);
        var estudiopsico = await EmployeService.GetEstudioWithPosgradosByIdAsync(psico.ObjectId);
        var namepsico = "";
        if (estudiopsico.ClavePosgrado)
        {
            namepsico = $"{estudiopsico.Posgrados.Select(ps => ps.Abrv)} {psico.NombreCorto}";
        }
        else
        {
            namepsico = $"{estudiopsico.Abrv} {psico.NombreCorto}";
        }
        return namepsico;
    }

    private async void clearText()
    {
        this.searchValue = "";
        this.filteredPatients = await PacienteService.GetAllPacientesAsync();
        Console.WriteLine($"Pacientes recibidos: {filteredPatients?.Count ?? 0}");
    }

    private async Task DeleteBtnClick()
    {
        filteredPatients = ((List<PacienteModel>)filteredPatients).Where(item => item.ObjectId != activePatientData.ObjectId).ToList();
        // Service.WaitingLists = Service.WaitingLists.Where(item => item.PatientId != activePatientData.Id).ToList();
        var deleteData = ((List<PacienteModel>)filteredPatients).Where(item => item.ObjectId != activePatientData.ObjectId).FirstOrDefault();
        await PacienteService.DeletePacienteAsync(deleteData.ObjectId);
        await this.gridObj.DeleteRecordAsync(null, deleteData);

        this.showGridEditDialog = false;
        this.IsShowPatientEditDialog = false;
    }

    public void Dispose()
    {
        gridObj = null;
        gridEditDialogObj = null;
        dialogObj = null;
        maskObj = null;
    }

    private List<PacienteModel> patients = new();

    private async Task LoadData()
    {
        try
        {
            var list = await PacienteService.GetAllPacientesAsync();
            Console.WriteLine($"Pacientes recibidos: {list?.Count ?? 0}");

            patients = list ?? new List<PacienteModel>();
            filteredPatients = patients.ToList();   // <-- importante
            isDataLoaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // log / toast si quieres
            isDataLoaded = true; // para que al menos veas el grid vacío
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadData(); // <-- await y solo aquí
        }

        if (showDeleteMsg && isDataLoaded)
        {
            await Task.Delay(2000);
            showDeleteMsg = false;
            StateHasChanged();
        }
        // ❌ NO llames LoadData() otra vez aquí
    }

}